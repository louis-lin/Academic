function [ ] = setupRun(RunName, loadControlName, analysisName, modelName, axialLoad, curvatures, stepScale)
% Creates the TCL files parametrically for the moment curvature analysis
arguments
    RunName = 'run.tcl';
    loadControlName = 'loadControlStaticAnalysis.tcl';
    analysisName = 'dispControlAnalysis.tcl'
    modelName = 'model01.tcl';
    axialLoad = 0.0;
    curvatures = 0.03;
    stepScale = 0.0001;
end

    FID = fopen(RunName, 'w');
    fprintf(FID,[...
        'set analysisResultsDirectory "AnalysisResults";\n',...	
        'file mkdir $analysisResultsDirectory;\n',... 
        'set modelDirectory "Model";\n',...
        'file mkdir $modelDirectory;\n',...
        'set modelExportFileID [open "$modelDirectory/modelData.txt" "w"];\n',...
        'source units.tcl;\n',...
        'source ' modelName ';\n',...
        'source ' loadControlName ';\n',...
        'source ' analysisName ';\n',...
        'remove recorders\n',...
        'wipe;\n']);
    fclose(FID);
    
    FID = fopen(loadControlName, 'w');
        fprintf(FID,...
        ['set axialLoadTag 1;\n',...
        'set axialLoadRatio ' num2str(axialLoad,'%1.2f') ';\n',...
        'set P [expr abs($fpc)*$colArea*$axialLoadRatio];\n',...
        'pattern Plain $axialLoadTag "Linear" {	load $controlNode -$P 0.0 0.0;};\n',...
        'set numAnalysisSteps 1 ;\n',...
        'integrator LoadControl [expr 1./$numAnalysisSteps];\n',...
        'system BandGeneral ;\n',...
        'test NormUnbalance 1e-6 100;\n',...
        'numberer Plain ;\n',...
        'constraints Plain ;\n',...
        'algorithm KrylovNewton ;\n',...
        'analysis Static;\n',...
        'set ok [analyze $numAnalysisSteps];\n',...
        'if {$ok == 0} {puts "Axial load applied and analyzed"};\n',...
        'loadConst -time 0.0']);
        fclose(FID);
        
        
        appendage = [];
        for k = curvatures 
            appendage = [appendage, 'lappend peakDisp [expr ', num2str(k,"%1.5f"), '/$colDepth]' , newline];
        end

        FID = fopen(analysisName, 'w'); 
        fprintf(FID,[...
        'set controlDOF 3',newline,...
        'set dispControlLoadTag 2 ', newline,...
        '# Define reference moment', newline,...
        'pattern Plain $dispControlLoadTag "Linear" {load $controlNode 0.0 0.0 1.0}', newline,...
        'set peakDisp {};', newline,...
        appendage,...
        'set numCycles [llength $peakDisp]', newline,...
        'set cyclelabel {};', newline,...
        'for {set i 1} {$i <= $numCycles} {incr i 1} {', newline,...
        '    lappend cyclelabel $i', newline...
        '}', newline,...
        'set maxDisp [expr 0.03/$colDepth];', newline,...
        'set du [expr ' num2str(stepScale) '*$maxDisp];', newline,...
        'set ok 0; ', newline,...
        'set currentDisp 0.; # This is the current value of the displacement at the control DOF.', newline,...
        'set tol 1e-6;', newline,...
        'set iter 250', newline,...
        'recorder Node -file $analysisResultsDirectory/MK.txt -time -node $controlNode -dof 1 $controlDOF disp', newline,...
        'recorder Element -file $analysisResultsDirectory/ConcFib1_SS.txt  -time -ele 1 section fiber -$y1  0. $matTagConcCover stressStrain', newline,...
        'recorder Element -file $analysisResultsDirectory/ConcFib2_SS.txt  -time -ele 1 section fiber  $y1  0. $matTagConcCover stressStrain', newline,...
        'recorder Element -file $analysisResultsDirectory/SteelFib1_SS.txt -time -ele 1 section fiber -$y1  0. $matTagSteel     stressStrain', newline,...
        'recorder Element -file $analysisResultsDirectory/SteelFib2_SS.txt -time -ele 1 section fiber  $y1  0. $matTagSteel     stressStrain', newline,...
        'record; # This is to record the state before the analysis starts', newline,...
        'for {set ii 1} {$ii<=[llength $peakDisp]} {incr ii} {', newline,...
            '# Convergence check', newline,...
            'if {$ok == 0} { ', newline,...
                'set cycleDisp [expr [lindex $peakDisp [expr $ii-1]] - $currentDisp]; # the total deformation of the loading cycle', newline,...
                '# determine the sign of loading:', newline,...
                'if {$cycleDisp>0} {', newline,...
                '	set sign 1.;', newline,...
                '} else {', newline,...
                '	set sign -1.;', newline,...
                '};', newline,...
                'set dU [expr $du*$sign];', newline,...
                '# General analysis properties', newline,...
                'constraints Transformation;     	', newline,...		
                'numberer Plain;			', newline,...
                'system BandGeneral;', newline,...
                'integrator DisplacementControl $controlNode $controlDOF $dU;', newline,...
                'test RelativeNormDispIncr $tol $iter;', newline,...
                'algorithm KrylovNewton;', newline,...
                'analysis Static;', newline,...
                'set NSteps [expr int(abs($cycleDisp/$dU))];', newline,...
                'puts "";', newline,...
                'puts "Starting Cycle # [lindex $cyclelabel [expr $ii-1]] with target displacement of [expr [lindex $peakDisp [expr $ii-1]]]"', newline,...
                'puts "======================================================"', newline,...
                'puts "---> Running $NSteps steps with step size = $dU in. to go from displ. = $currentDisp to displ. = [expr [lindex $peakDisp [expr $ii-1]]]"', newline,...
                'set ok1 [analyze $NSteps];', newline,...
                'set currentDisp [nodeDisp $controlNode $controlDOF];', newline,...
                '#If it does not converge, change strategies', newline,...
                'if {$ok1 !=0 } {', newline,...
                    'set ok 0;', newline,...
                    'puts "		Try stuff, peak disp = [expr [lindex $peakDisp [expr $ii-1]]]";', newline,...
                    'puts "	    Current disp = $currentDisp";', newline,...
                    'puts "		Cycle disp  = $cycleDisp";', newline,...
                    'set counter 1;', newline,...
                    'while {( ( ([expr $currentDisp] <= [expr [lindex $peakDisp [expr $ii-1]]]) && ($sign == 1)  ) || (  ([expr $currentDisp] >= [expr [lindex $peakDisp [expr $ii-1]]]) && ($sign == -1)   ) )&&($ok==0)} {', newline,...
                    '	set ok 1;', newline,...
                    '	while {$ok!=0} {', newline,...
                    '		if {$counter == 0} {', newline,...
                    '			# return to initial conditions', newline,...
                    '			set dU [expr $du*$sign*1.00];', newline,...
                    '			test NormDispIncr $tol $iter 0;', newline,...
                    '			set counter 1;', newline,...
                    '		} elseif {$counter == 1} {', newline,...
                    '			# increase load stepsize', newline,...
                    '			set dU [expr $du*$sign*1.5];', newline,...
                    '			#puts "dU = $du*$sign*1.5 = $dU";', newline,...
                    '			set counter 2;', newline,...
                    '		} elseif {$counter == 2} {', newline,...
                    '			# increase load stepsize', newline,...
                    '			set dU [expr $du*$sign*2.00];', newline,...
                    '			#puts "dU = $du*$sign*2.0 = $dU";', newline,...
                    '			set counter 3;', newline,...
                    '		} elseif {$counter == 3} {', newline,...
                    '			# decrease load stepsize', newline,...
                    '			set dU [expr $du*$sign*0.5];', newline,...
                    '			#puts "dU = $du*$sign*0.5 = $dU";', newline,...
                    '			set counter 4;', newline,...
                    '		} elseif {$counter == 4} {', newline,...
                    '			# decrease load stepsize', newline,...
                    '			set dU [expr $du*$sign*0.1];', newline,...
                    '			#puts "dU = $du*$sign*0.1 = $dU";', newline,...
                    '			set counter 5;', newline,...
                    '		} elseif {$counter == 5} {', newline,...
                    '			# decrease load stepsize', newline,...
                    '			set dU [expr $du*$sign*0.05];', newline,...
                    '			#puts "dU = $du*$sign*0.05 = $dU";', newline,...
                    '			set counter 6;', newline,...
                    '		} elseif {$counter == 6} {', newline,...
                    '			# decrease load stepsize', newline,...
                    '			set dU [expr $du*$sign*0.01];', newline,...
                    '			#puts "dU = $du*$sign*0.01 = $dU";', newline,...
                    '			set counter 7;', newline,...
                    '		} elseif {$counter == 7} {', newline,...
                    '			# decrease load stepsize', newline,...
                    '			set dU [expr $du*$sign*0.001];', newline,...
                    '			#puts "dU = $du*$sign*0.001 = $dU";', newline,...
                    '			set counter 8;', newline,...
                    '		};', newline,...
                    '		integrator DisplacementControl $controlNode  $controlDOF  $dU;', newline,...
                    '		set ok [analyze 1]', newline,...
                    '		if {$ok != 0} {', newline,...
                    '			puts "Try Newton Initial"', newline,...
                    '			algorithm Newton -initial', newline,...
                    '			test NormDispIncr $tol $iter 0;', newline,...
                    '			set ok [analyze 1];', newline,...
                    '		};', newline,...
                    '		if {$ok != 0} {', newline,...
                    '			puts "Test Relative Displacement"', newline,...
                    '			test RelativeNormDispIncr $tol $iter 0;', newline,...
                    '			set ok [analyze 1];', newline,...
                    '		};', newline,...
                    '		if {$ok != 0} {', newline,...
                    '			puts "ModifiedNewton"', newline,...
                    '			algorithm ModifiedNewton', newline,...
                    '			set ok [analyze 1];', newline,...
                    '		};', newline,...
                    '		if {$ok != 0} {', newline,...
                    '			puts "Test Relative Energy"', newline,...
                    '			algorithm Newton -initial;', newline,...
                    '			test RelativeEnergyIncr $tol $iter 0;', newline,...
                    '			set ok [analyze 1];', newline,...
                    '		};', newline,...
                    '		if {$ok != 0} {', newline,...
                    '			puts "Newton Modified -initial"', newline,...
                    '			algorithm ModifiedNewton -initial', newline,...
                    '			set ok [analyze 1];', newline,...
                    '		};', newline,...
                    '		if {$ok != 0} {', newline,...
                    '			puts "Test Relative Force"', newline,...
                    '			algorithm Newton -initial;', newline,...
                    '			test RelativeNormUnbalance $tol $iter 0', newline,...
                    '			set ok [analyze 1];', newline,...
                    '		};', newline,...
                    '		if {$ok != 0} {', newline,...
                    '			puts "Test Relative Displ"', newline,...
                    '			test RelativeNormDispIncr $tol $iter 0', newline,...
                    '			set ok [analyze 1];', newline,...
                    '		};', newline,...
                    '		if {$ok != 0} {', newline,...
                    '			puts "Broyden"', newline,...
                    '			algorithm Broyden 8', newline,...
                    '			set ok [analyze 1];', newline,...
                    '		};', newline,...
                    '		if {$ok != 0} {', newline,...
                    '			puts "Newton Line Search"', newline,...
                    '			algorithm NewtonLineSearch .8', newline,...
                    '			set ok [analyze 1];', newline,...
                    '		};', newline,...
                    '		if {$ok != 0} {', newline,...
                    '			puts "BFGS"', newline,...
                    '			algorithm BFGS', newline,...
                    '			set ok [analyze 1];', newline,...
                    '		};', newline,...
                    '	};', newline,...
                    '	set counter 0;', newline,...
                    '	set currentDisp [nodeDisp $controlNode $controlDOF];', newline,...
                     '   #puts $currentDisp', newline,...
                    '};', newline,...
                    'puts "Cycle # [lindex $cyclelabel [expr $ii-1]] successfully finished!"', newline,...
                    'puts "target displ.  = [expr [lindex $peakDisp [expr $ii-1]]]"', newline,...
                    'puts "current displ. = [nodeDisp $controlNode $controlDOF]"', newline,...
                    'puts "---------------------------------x---------------------------------------";', newline,...
                '} else {', newline,...
                    'puts "Cycle # [lindex $cyclelabel [expr $ii-1]] successfully finished!"', newline,...
                    'puts "target displ.  = [expr [lindex $peakDisp [expr $ii-1]]]"', newline,...
                    'puts "current displ. = [nodeDisp $controlNode $controlDOF]"', newline,...
                    'puts "---------------------------------x---------------------------------------";', newline,...
                '};', newline,...
            '};', newline,...
        '};', newline,...
        'if { $ok<0 } {', newline,...
        '   puts "FAILED TO CONVERGE!!" ', newline,...
        '} else {', newline,...
        '   puts "";', newline,...
        '   puts "ALL SUCCESSFUL!!"', newline,...
        '   puts $modelnum', newline,...
        '}', newline]);
        fclose(FID);

end

