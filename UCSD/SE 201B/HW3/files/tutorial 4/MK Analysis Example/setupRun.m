function [ ] = setupRun(RunName, loadControlName, analysisName, modelName, axialLoad, curvatures)
%UNTITLED2 Summary of this function goes here
%   Detailed explanation goes here
arguments
    RunName = '.\run.tcl';
    loadControlName = '.\loadControlStaticAnalysis.tcl';
    analysisName = 'dispControlAnalysis.tcl'
    modelName = 'model';
    axialLoad = 0.0;
    curvatures = 0.03;
end

    FID = fopen(RunName, 'w');
    fprintf(FID,[...
        'set analysisResultsDirectory "AnalysisResults";\n',...	
        'file mkdir $analysisResultsDirectory;\n',... 
        'set modelDirectory "Model";\n',...
        'file mkdir $modelDirectory;\n',...
        'set modelExportFileID [open "$modelDirectory/modelData.txt" "w"];\n',...
        'source units.tcl;\n',...
        'source ' modelName '.tcl;\n',...
        'source ' loadControlName '.tcl;\n',...
        'source ' analysisName '\n',...
        'remove recorders\n',...
        'wipe;\n']);
    fclose(FID);
    
    FID = fopen(loadControlName, 'w');
        fprintf(FID,...
        ['set axialLoadTag 1;\n',...
        'set axialLoadRatio ' num2str(axialLoad,'%1.1f') ';\n',...
        'set P [expr abs($fpc)*$colArea*$axialLoadRatio];\n',...
        'pattern Plain $axialLoadTag "Linear" {	load $controlNode -$P 0.0 0.0;};\n',...
        'set numAnalysisSteps 1 ;\n',...
        'integrator LoadControl [expr 1./$numAnalysisSteps];\n',...
        'system BandGeneral ;\n',...
        'test NormUnbalance 1e-6 100;\n',...
        'numberer Plain ;\n',...
        'constraints Plain ;\n',...
        'algorithm KrylovNewton ;\n',...
        'analysis Static;\n',...
        'set ok [analyze $numAnalysisSteps];\n',...
        'if {$ok == 0} {puts "Axial load applied and analyzed"};\n',...
        'loadConst -time 0.0']);
        fclose(FID);
        
        
        appendage = [];
        for k = curvatures 
            appendage = [appendage, "lappend peakDisp [expr " num2str(k,"%1.3f") "/$colDepth]\n"];
        end

        FID = fopen(analysisName, 'w'); 
        fprintf(FID,[...
        'set controlDOF 3/n',...
        'set dispControlLoadTag 2/n',...
        '# Define reference moment/n',...
        'pattern Plain $dispControlLoadTag "Linear" {load $controlNode 0.0 0.0 1.0}/n',...
        'set peakDisp {};/n',...
        'set numCycles [llength $peakDisp]/n',...
        'set cyclelabel {};/n',...
        'for {set i 1} {$i <= $numCycles} {incr i 1} {/n',...
        '    lappend cyclelabel $i/n',...
        '}/n',...
        'set maxDisp [expr 0.03/$colDepth];/n',...
        'set du [expr 0.0001*$maxDisp];/n',...
        '#set du [expr 0.01*0.005/$colDepth];			# Disp increment to be set/n',...
        'set ok 0; /n',...
        'set currentDisp 0.; # This is the current value of the displacement at the control DOF./n',...
        'set tol 1e-6;/n',...
        'set iter 250/n',...
        'recorder Node -file $analysisResultsDirectory/MK.txt -time -node $controlNode -dof 1 $controlDOF disp/n',...
        'recorder Element -file $analysisResultsDirectory/ConcFib1_SS.txt  -time -ele 1 section fiber -$y1  0. $matTagConcCover stressStrain/n',...
        'recorder Element -file $analysisResultsDirectory/ConcFib2_SS.txt  -time -ele 1 section fiber  $y1  0. $matTagConcCover stressStrain/n',...
        'recorder Element -file $analysisResultsDirectory/SteelFib1_SS.txt -time -ele 1 section fiber -$y1  0. $matTagSteel     stressStrain/n',...
        'recorder Element -file $analysisResultsDirectory/SteelFib2_SS.txt -time -ele 1 section fiber  $y1  0. $matTagSteel     stressStrain/n',...
        'record; # This is to record the state before the analysis starts/n',...
        'for {set ii 1} {$ii<=[llength $peakDisp]} {incr ii} {/n',...
            '# Convergence check/n',...
            'if {$ok == 0} { /n',...
                'set cycleDisp [expr [lindex $peakDisp [expr $ii-1]] - $currentDisp]; # the total deformation of the loading cycle/n',...
                '# determine the sign of loading:/n',...
                'if {$cycleDisp>0} {/n',...
                '	set sign 1.;/n',...
                '} else {/n',...
                '	set sign -1.;/n',...
                '};/n',...
                'set dU [expr $du*$sign];/n',...
                '# General analysis properties/n',...
                'constraints Transformation;     	/n',...		
                'numberer Plain;			/n',...
                'system BandGeneral;/n',...
                'integrator DisplacementControl $controlNode $controlDOF $dU;/n',...
                'test RelativeNormDispIncr $tol $iter;/n',...
                'algorithm KrylovNewton;/n',...
                'analysis Static;/n',...
                'set NSteps [expr int(abs($cycleDisp/$dU))];/n',...
                'puts "";/n',...
                'puts "Starting Cycle # [lindex $cyclelabel [expr $ii-1]] with target displacement of [expr [lindex $peakDisp [expr $ii-1]]]"/n',...
                'puts "======================================================"/n',...
                'puts "---> Running $NSteps steps with step size = $dU in. to go from displ. = $currentDisp to displ. = [expr [lindex $peakDisp [expr $ii-1]]]"/n',...
                'set ok1 [analyze $NSteps];/n',...
                'set currentDisp [nodeDisp $controlNode $controlDOF];/n',...
                '#If it does not converge, change strategies/n',...
                'if {$ok1 !=0 } {/n',...
                    'set ok 0;/n',...
                    'puts "		Try stuff, peak disp = [expr [lindex $peakDisp [expr $ii-1]]]";/n',...
                    'puts "	    Current disp = $currentDisp";/n',...
                    'puts "		Cycle disp  = $cycleDisp";/n',...
                    'set counter 1;/n',...
                    'while {( ( ([expr $currentDisp] <= [expr [lindex $peakDisp [expr $ii-1]]]) && ($sign == 1)  ) || (  ([expr $currentDisp] >= [expr [lindex $peakDisp [expr $ii-1]]]) && ($sign == -1)   ) )&&($ok==0)} {/n',...
                    '	set ok 1;/n',...
                    '	while {$ok!=0} {/n',...
                    '		if {$counter == 0} {/n',...
                    '			# return to initial conditions/n',...
                    '			set dU [expr $du*$sign*1.00];/n',...
                    '			test NormDispIncr $tol $iter 0;/n',...
                    '			set counter 1;/n',...
                    '		} elseif {$counter == 1} {/n',...
                    '			# increase load stepsize/n',...
                    '			set dU [expr $du*$sign*1.5];/n',...
                    '			#puts "dU = $du*$sign*1.5 = $dU";/n',...
                    '			set counter 2;/n',...
                    '		} elseif {$counter == 2} {/n',...
                    '			# increase load stepsize/n',...
                    '			set dU [expr $du*$sign*2.00];/n',...
                    '			#puts "dU = $du*$sign*2.0 = $dU";/n',...
                    '			set counter 3;/n',...
                    '		} elseif {$counter == 3} {/n',...
                    '			# decrease load stepsize/n',...
                    '			set dU [expr $du*$sign*0.5];/n',...
                    '			#puts "dU = $du*$sign*0.5 = $dU";/n',...
                    '			set counter 4;/n',...
                    '		} elseif {$counter == 4} {/n',...
                    '			# decrease load stepsize/n',...
                    '			set dU [expr $du*$sign*0.1];/n',...
                    '			#puts "dU = $du*$sign*0.1 = $dU";/n',...
                    '			set counter 5;/n',...
                    '		} elseif {$counter == 5} {/n',...
                    '			# decrease load stepsize/n',...
                    '			set dU [expr $du*$sign*0.05];/n',...
                    '			#puts "dU = $du*$sign*0.05 = $dU";/n',...
                    '			set counter 6;/n',...
                    '		} elseif {$counter == 6} {/n',...
                    '			# decrease load stepsize/n',...
                    '			set dU [expr $du*$sign*0.01];/n',...
                    '			#puts "dU = $du*$sign*0.01 = $dU";/n',...
                    '			set counter 7;/n',...
                    '		} elseif {$counter == 7} {/n',...
                    '			# decrease load stepsize/n',...
                    '			set dU [expr $du*$sign*0.001];/n',...
                    '			#puts "dU = $du*$sign*0.001 = $dU";/n',...
                    '			set counter 8;/n',...
                    '		};/n',...
                    '		integrator DisplacementControl $controlNode  $controlDOF  $dU;/n',...
                    '		set ok [analyze 1]/n',...
                    '		if {$ok != 0} {/n',...
                    '			puts "Try Newton Initial"/n',...
                    '			algorithm Newton -initial/n',...
                    '			test NormDispIncr $tol $iter 0;/n',...
                    '			set ok [analyze 1];/n',...
                    '		};/n',...
                    '		if {$ok != 0} {/n',...
                    '			puts "Test Relative Displacement"/n',...
                    '			test RelativeNormDispIncr $tol $iter 0;/n',...
                    '			set ok [analyze 1];/n',...
                    '		};/n',...
                    '		if {$ok != 0} {/n',...
                    '			puts "ModifiedNewton"/n',...
                    '			algorithm ModifiedNewton/n',...
                    '			set ok [analyze 1];/n',...
                    '		};/n',...
                    '		if {$ok != 0} {/n',...
                    '			puts "Test Relative Energy"/n',...
                    '			algorithm Newton -initial;/n',...
                    '			test RelativeEnergyIncr $tol $iter 0;/n',...
                    '			set ok [analyze 1];/n',...
                    '		};/n',...
                    '		if {$ok != 0} {/n',...
                    '			puts "Newton Modified -initial"/n',...
                    '			algorithm ModifiedNewton -initial/n',...
                    '			set ok [analyze 1];/n',...
                    '		};/n',...
                    '		if {$ok != 0} {/n',...
                    '			puts "Test Relative Force"/n',...
                    '			algorithm Newton -initial;/n',...
                    '			test RelativeNormUnbalance $tol $iter 0/n',...
                    '			set ok [analyze 1];/n',...
                    '		};/n',...
                    '		if {$ok != 0} {/n',...
                    '			puts "Test Relative Displ"/n',...
                    '			test RelativeNormDispIncr $tol $iter 0/n',...
                    '			set ok [analyze 1];/n',...
                    '		};/n',...
                    '		if {$ok != 0} {/n',...
                    '			puts "Broyden"/n',...
                    '			algorithm Broyden 8/n',...
                    '			set ok [analyze 1];/n',...
                    '		};/n',...
                    '		if {$ok != 0} {/n',...
                    '			puts "Newton Line Search"/n',...
                    '			algorithm NewtonLineSearch .8/n',...
                    '			set ok [analyze 1];/n',...
                    '		};/n',...
                    '		if {$ok != 0} {/n',...
                    '			puts "BFGS"/n',...
                    '			algorithm BFGS/n',...
                    '			set ok [analyze 1];/n',...
                    '		};/n',...
                    '	};/n',...
                    '	set counter 0;/n',...
                    '	set currentDisp [nodeDisp $controlNode $controlDOF];/n',...
                     '   #puts $currentDisp/n',...
                    '};/n',...
                    'puts "Cycle # [lindex $cyclelabel [expr $ii-1]] successfully finished!"/n',...
                    'puts "target displ.  = [expr [lindex $peakDisp [expr $ii-1]]]"/n',...
                    'puts "current displ. = [nodeDisp $controlNode $controlDOF]"/n',...
                    'puts "---------------------------------x---------------------------------------";/n',...
                '} else {/n',...
                    'puts "Cycle # [lindex $cyclelabel [expr $ii-1]] successfully finished!"/n',...
                    'puts "target displ.  = [expr [lindex $peakDisp [expr $ii-1]]]"/n',...
                    'puts "current displ. = [nodeDisp $controlNode $controlDOF]"/n',...
                    'puts "---------------------------------x---------------------------------------";/n',...
                '};/n',...
            '};/n',...
        '};/n',...
        'if { $ok<0 } {/n',...
        '   puts "FAILED TO CONVERGE!!" /n',...
        '} else {/n',...
        '   puts "";/n',...
        '   puts "ALL SUCCESSFUL!!"/n',...
        '   puts $modelnum/n',...
        '}/n']);
        fclose(FID);

end

